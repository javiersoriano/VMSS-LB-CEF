{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Base_Name": {
			"type": "String"
		},
		"Autoscale_Min": {
			"defaultValue": 1,
			"type": "Int"
		},
		"Autoscale_Max": {
			"type": "Int"
		},
		"AdminPassword": {
			"type": "SecureString"
		},
		"cloudinit": {
			"defaultValue": "#cloud-config\nruncmd:\n   - sudo wget -O Forwarder_AMA_installer.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/Syslog/Forwarder_AMA_installer.py&&sudo python3 Forwarder_AMA_installer.py",
			"type": "String"
		},
		"workspaceSubscriptionId": {
			"type": "String"
		},
		"workspaceResourceGroupName": {
			"type": "String"
		},
		"WorkspaceName": {
			"type": "String",
			"metadata": {
				"description": "The workspace and the DCR must be in the same region"
			}
		},
		"workspaceId": {
			"type": "String"
		},
		"facilityNames": {
			"type": "Array",
			"defaultValue": [
                		"auth",
                		"authpriv",
                		"cron",
                		"daemon",
                		"mark",
                		"kern",
				"local0",
                		"local1",
                		"local2",
                		"local3",
                		"local4",
                		"local5",
                		"local6",
                		"local7",
                		"lpr",
                		"mail",
                		"news",
                		"syslog",
                		"user",
                		"uucp"
            ],
			"metadata": {
				"description": "Include the facilities you would like to collect"
			}
		},
		"logLevels": {
			"type": "Array",
			"defaultValue": [
                		"Debug",
                		"Info",
                		"Notice",
                		"Warning",
                		"Error",
                		"Critical",
                		"Alert",
                		"Emergency"
            ],
			"metadata": {
				"description": "Include the log levels you would like to collect"
			}
		},
		"dataCollectionRuleName": {
			"type": "String",
			"metadata": {
				"description": "Choose a name for the DCR you are about to create"
			},
			"defaultValue": "Default"
		},
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "Admin username"
      }
    },
    "sshKeyData": {
      "type": "string",
      "metadata": {
        "description": "SSH rsa public key file as a string."
      }
    },
    "lbDNSLabelPrefix": {
      "type": "string",
      "metadata": {
        "description": "DNS Label for the load balancer Public IP. Must be lowercase. It should match with the regex: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$."
      }
    },
    "haproxyVMNamePrefix": {
      "type": "string",
      "defaultValue": "haproxyvm-",
      "metadata": {
        "description": "Prefix to use for names of VMs under the load balancer"
      }
    },
    "appVMNamePrefix": {
      "type": "string",
      "defaultValue": "appvm-",
      "metadata": {
        "description": "Prefix to use for names of application VMs"
      }
    },
    "ubuntuOSVersion": {
      "type": "string",
      "defaultValue": "14.04.5-LTS",
      "allowedValues": [
        "12.04.5-LTS",
        "14.04.5-LTS",
        "15.10"
      ],
      "metadata": {
        "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version. Allowed values: 12.04.5-LTS, 14.04.5-LTS, 15.10."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D2_v3",
      "metadata": {
        "description": "Size of the VM"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "location"
      }
    },
    "_artifactsLocation": {
        "type": "string",
        "metadata": {
            "description": "The base URI where artifacts required by this template are located including a trailing '/'"
        },
        "defaultValue": "https://raw.githubusercontent.com/javiersoriano/VMSS-LB-CEF/main/"
    },
    "_artifactsLocationSasToken": {
        "type": "securestring",
        "metadata": {
            "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
        },
        "defaultValue": ""
    }
  },
  "variables": {
    "storageAccountName": "[concat(uniqueString(resourceGroup().id), 'haproxysa')]",
    "numberOfHAproxyInstances": 2,
    "haproxyVMScripts": {
      "fileUris": [
        "[uri(parameters('_artifactsLocation'), concat('haproxyvm-configure.sh', parameters('_artifactsLocationSasToken')))]",
        "[uri(parameters('_artifactsLocation'), concat('keepalived-action.sh', parameters('_artifactsLocationSasToken')))]",
        "[uri(parameters('_artifactsLocation'), concat('keepalived-check-appsvc.sh', parameters('_artifactsLocationSasToken')))]"
      ],
      "commandToExecute": "[concat('sudo bash -x haproxyvm-configure.sh ', ' -a ', variables('lbIP'), ' -p ', variables('appVMPort'), ' -l ', parameters('lbDNSLabelPrefix'), '.', parameters('location'), '.cloudapp.azure.com -t ', variables('lbVIPPort'), ' -m ', parameters('haproxyVMNamePrefix'), '0 -b ', parameters('haproxyVMNamePrefix'), '1')]"
    },
    "appVMPort": 514,
    "imagePublisher": "Canonical",
    "imageOffer": "UbuntuServer",
    "sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
    "nicNamePrefix": "nic-",
    "storageAccountType": "Standard_LRS",
    "haproxyAvailabilitySetName": "haproxyAvSet",
    "appAvailabilitySetName": "appAvSet",
    "vnetName": "haproxyVNet",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "Subnet-1",
    "subnetPrefix": "10.0.0.0/24",
    "lbIP": "10.0.0.6",
    "lbName": "haproxyLB",
    "lbPublicIPAddressType": "Static",
    "lbPublicIPAddressName": "[concat(variables('lbName'), '-publicip')]",
    "lbVIPPort": 514,
    "vmss_Name": "[concat(parameters('Base_Name'), '-vmss')]",
		"nsg_Name": "[concat(parameters('Base_Name'),'-nsg')]",
		"autoscale_Name": "[concat(parameters('Base_Name'),'-autoscale')]",
		"loadbalancer_Name": "[concat(parameters('Base_Name'),'-lb')]",
		"maxPortRange": "[if(lessOrEquals(parameters('Autoscale_Max'), 9), '5000', '500')]"

  },
  "resources": [
    {
      "apiVersion": "2021-01-01",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[variables('storageAccountType')]"
      },
      "kind": "StorageV2"
    },
    {
      "apiVersion": "2020-12-01",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('haproxyAvailabilitySetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "PlatformUpdateDomainCount": 3,
        "PlatformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "apiVersion": "2020-11-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('lbPublicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "[variables('lbPublicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[parameters('lbDNSLabelPrefix')]"
        }
      }
    },
    {
      "apiVersion": "2020-11-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vnetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-11-01",
      "name": "[variables('lbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses/', variables('lbPublicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('lbPublicIPAddressName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "BackendPool1"
          }
        ],
        "inboundNatRules": [
          {
            "name": "SSH-VM0",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations',variables('lbName'),'LoadBalancerFrontEnd')]"
              },
              "protocol": "Tcp",
              "frontendPort": 50001,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "SSH-VM1",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations',variables('lbName'),'LoadBalancerFrontEnd')]"
              },
              "protocol": "Tcp",
              "frontendPort": 50002,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations',variables('lbName'),'LoadBalancerFrontEnd')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools',variables('lbName'), 'BackendPool1')]"
              },
              "protocol": "Tcp",
              "frontendPort": "[variables('lbVIPPort')]",
              "backendPort": "[variables('lbVIPPort')]",
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes',variables('lbName'), 'tcpProbe')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpProbe",
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-06-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('haproxyVMNamePrefix'), variables('nicNamePrefix'), copyindex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "haproxyNicLoop",
        "count": "[variables('numberOfHAproxyInstances')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
        "[resourceId('Microsoft.Network/loadBalancers/', variables('lbName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables ('subnetName'))]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools',variables('lbName'), 'BackendPool1')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('lbName'), concat('SSH-VM',  copyindex()))]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-12-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('haproxyVMNamePrefix'), copyindex())]",
      "copy": {
        "name": "haproxyVMLoop",
        "count": "[variables('numberOfHAproxyInstances')]"
      },
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', concat(parameters('haproxyVMNamePrefix'), variables('nicNamePrefix'), copyindex()))]",
        "[resourceId('Microsoft.Compute/availabilitySets/', variables('haproxyAvailabilitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('haproxyAvailabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(parameters('haproxyVMNamePrefix'), copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('ubuntuOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(parameters('haproxyVMNamePrefix'), 'OSDisk-', copyindex())]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[variables('storageAccountType')]"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('haproxyVMNamePrefix'), variables('nicNamePrefix'),copyindex()))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
              "storageUri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-01-01').primaryEndpoints.blob)]"
          }
        }
      }
    },
    {
      "apiVersion": "2020-12-01",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('haproxyVMNamePrefix'), copyindex(), '/configureHAproxyVM')]",
      "copy": {
        "name": "haproxyVMExtensionsLoop",
        "count": "[variables('numberOfHAproxyInstances')]"
      },
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', concat(parameters('haproxyVMNamePrefix'), copyindex()))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": "[variables('haproxyVMScripts').fileUris]",
          "commandToExecute": "[variables('haproxyVMScripts').commandToExecute]"
        }
      }
    },
    {
			"type": "Microsoft.Network/loadBalancers",
			"apiVersion": "2019-09-01",
			"name": "[variables('loadbalancer_Name')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
       "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('haproxyVMNamePrefix'), 'configureHAproxyVM')]"
			],
			"sku": {
				"name": "Standard"
			},
			"properties": {
				"frontendIPConfigurations": [{
					"name": "LoadBalancerFrontEnd",
					"properties": {
            "privateIPAddress": "10.0.0.6",
            "privateIPAddressVersion": "IPv4",
            "privateIPAllocationMethod": "Static",
						"subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]"
              }
					}
				}],
				"backendAddressPools": [{
					"name": "bepool",
					"properties": {}
				}],
				"loadBalancingRules": [{
						"name": "LBSyslogTCPRule",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadbalancer_Name')), '/frontendIPConfigurations/LoadBalancerFrontEnd')]"
							},
							"frontendPort": 514,
							"backendPort": 514,
							"enableFloatingIP": false,
							"idleTimeoutInMinutes": 5,
							"protocol": "TCP",
							"enableTcpReset": false,
							"loadDistribution": "Default",
							"disableOutboundSnat": false,
							"backendAddressPool": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadbalancer_Name')), '/backendAddressPools/bepool')]"
							},
							"probe": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadbalancer_Name')), '/probes/tcpProbe')]"
							}
						}
					},
					{
						"name": "LBSyslogUDPRule",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadbalancer_Name')), '/frontendIPConfigurations/LoadBalancerFrontEnd')]"
							},
							"frontendPort": 514,
							"backendPort": 514,
							"enableFloatingIP": false,
							"idleTimeoutInMinutes": 5,
							"protocol": "Udp",
							"enableTcpReset": false,
							"loadDistribution": "Default",
							"disableOutboundSnat": false,
							"backendAddressPool": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadbalancer_Name')), '/backendAddressPools/bepool')]"
							},
							"probe": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadbalancer_Name')), '/probes/tcpProbe')]"
							}
						}
					}
				],
				"probes": [
          {
					"name": "tcpProbe",
					"properties": {
						"protocol": "Tcp",
						"port": 514,
						"intervalInSeconds": 5,
						"numberOfProbes": 2
					  }
				  }
        ],
				"inboundNatRules": [],
				"outboundRules": [],
				"inboundNatPools": [{
					"name": "natPool",
					"properties": {
						"frontendPortRangeStart": 50000,
						"frontendPortRangeEnd": "[concat(variables('maxPortRange'), parameters('Autoscale_Max'))]",
						"backendPort": 22,
						"protocol": "Tcp",
						"idleTimeoutInMinutes": 4,
						"enableFloatingIP": false,
						"enableTcpReset": false,
						"frontendIPConfiguration": {
							"id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadbalancer_Name')), '/frontendIPConfigurations/LoadBalancerFrontEnd')]"
						}
					}
				}]
			}
		},
    {
			"type": "Microsoft.Network/networkSecurityGroups",
			"apiVersion": "2019-09-01",
			"name": "[variables('NSG_Name')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"securityRules": [{
						"name": "Allow-Syslog",
						"properties": {
							"protocol": "*",
							"sourcePortRange": "*",
							"destinationPortRange": "514",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 1000,
							"direction": "Inbound",
							"sourcePortRanges": [],
							"destinationPortRanges": [],
							"sourceAddressPrefixes": [],
							"destinationAddressPrefixes": []
						}
					},
					{
						"name": "Allow-SSH",
						"properties": {
							"protocol": "*",
							"sourcePortRange": "*",
							"destinationPortRange": "22",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 1001,
							"direction": "Inbound",
							"sourcePortRanges": [],
							"destinationPortRanges": [],
							"sourceAddressPrefixes": [],
							"destinationAddressPrefixes": []
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/networkSecurityGroups/securityRules",
			"apiVersion": "2019-09-01",
			"name": "[concat(variables('nsg_Name'), '/Allow-Syslog')]",
			"dependsOn": [
				"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg_Name'))]"
			],
			"properties": {
				"protocol": "UDP",
				"sourcePortRange": "*",
				"destinationPortRange": "514",
				"sourceAddressPrefix": "*",
				"destinationAddressPrefix": "*",
				"access": "Allow",
				"priority": 1000,
				"direction": "Inbound",
				"sourcePortRanges": [],
				"destinationPortRanges": [],
				"sourceAddressPrefixes": [],
				"destinationAddressPrefixes": []
			}
		},
		{
			"type": "Microsoft.Network/networkSecurityGroups/securityRules",
			"apiVersion": "2019-09-01",
			"name": "[concat(variables('nsg_Name'), '/Allow-SSH')]",
			"dependsOn": [
				"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg_Name'))]"
			],
			"properties": {
				"protocol": "UDP",
				"sourcePortRange": "*",
				"destinationPortRange": "22",
				"sourceAddressPrefix": "*",
				"destinationAddressPrefix": "*",
				"access": "Allow",
				"priority": 1001,
				"direction": "Inbound",
				"sourcePortRanges": [],
				"destinationPortRanges": [],
				"sourceAddressPrefixes": [],
				"destinationAddressPrefixes": []
			}
		},
    {
			"type": "Microsoft.Compute/virtualMachineScaleSets",
			"apiVersion": "2019-03-01",
			"name": "[variables('vmss_Name')]",
			"location": "[resourceGroup().location]",
			"identity": {
				"type": "UserAssigned",
				"userAssignedIdentities": {
					"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'managedIdentity')]": {}
				}
			},
			"dependsOn": [
				"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg_Name'))]",
				"[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
				"[resourceId('Microsoft.Network/loadBalancers', variables('loadbalancer_Name'))]",
				"default",
				"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'managedIdentity')]"
			],
			"sku": {
				"name": "Standard_F4s_v2",
				"tier": "Standard",
				"capacity": "[parameters('Autoscale_Min')]"
			},
			"properties": {
				"singlePlacementGroup": true,
				"upgradePolicy": {
					"mode": "Manual"
				},
				"virtualMachineProfile": {
					"osProfile": {
						"computerNamePrefix": "[concat(parameters('Base_Name'), 'vm')]",
						"customData": "[base64(parameters('cloudinit'))]",
						"adminUsername": "[parameters('AdminUserName')]",
						"adminPassword": "[parameters('AdminPassword')]",
						"linuxConfiguration": {
							"disablePasswordAuthentication": false,
							"provisionVMAgent": true
						},
						"secrets": []
					},
					"extensionProfile": {
						"extensions": [{
							"name": "AMA",
							"properties": {
								"publisher": "Microsoft.Azure.Monitor",
								"typeHandlerVersion": "1.22",
								"autoUpgradeMinorVersion": true,
								"enableAutomaticUpgrade": true,
								"type": "AzureMonitorLinuxAgent"

							}
						}]
					},
					"storageProfile": {
						"osDisk": {
							"createOption": "FromImage",
							"caching": "ReadWrite",
							"managedDisk": {
								"storageAccountType": "Premium_LRS"
							},
							"diskSizeGB": 32
						},
						"imageReference": {
							"publisher": "Canonical",
							"offer": "UbuntuServer",
							"sku": "18.04-LTS",
							"version": "latest"
						}
					},
					"networkProfile": {
						"networkInterfaceConfigurations": [{
							"name": "[concat(parameters('Base_Name'), '-nic')]",
							"properties": {
								"primary": true,
								"enableAcceleratedNetworking": false,
								"dnsSettings": {
									"dnsServers": []
								},
								"enableIPForwarding": false,
								"ipConfigurations": [{
									"name": "[concat(parameters('Base_Name'), '-ipConfig')]",
									"properties": {
										"subnet": {
											"id": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '/subnets/default')]"
										},
										"privateIPAddressVersion": "IPv4",
										"loadBalancerBackendAddressPools": [{
											"id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadbalancer_Name')), '/backendAddressPools/bepool')]"
										}],
										"loadBalancerInboundNatPools": [{
											"id": "[concat(resourceId('Microsoft.Network/loadBalancers/', variables('loadbalancer_Name')), '/inboundNatPools/natPool')]"
										}]
									}
								}]
							}
						}]
					}
				},
				"overprovision": true,
				"doNotRunExtensionsOnOverprovisionedVMs": false,
				"platformFaultDomainCount": 5
			}
		},
		{
			"type": "Microsoft.Insights/autoscalesettings",
			"apiVersion": "2014-04-01",
			"name": "[variables('autoscale_Name')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('vmss_Name'))]"
			],
			"properties": {
				"profiles": [{
					"name": "Profile1",
					"capacity": {
						"minimum": "[parameters('Autoscale_Min')]",
						"maximum": "[parameters('Autoscale_Max')]",
						"default": "[parameters('Autoscale_Min')]"
					},
					"rules": [{
							"metricTrigger": {
								"metricName": "Percentage CPU",
								"metricNamespace": "",
								"metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('vmss_Name'))]",
								"timeGrain": "PT1M",
								"statistic": "Average",
								"timeWindow": "PT5M",
								"timeAggregation": "Average",
								"operator": "GreaterThan",
								"threshold": 75,
								"dimensions": [],
								"dividePerInstance": false
							},
							"scaleAction": {
								"direction": "Increase",
								"type": "ChangeCount",
								"value": "1",
								"cooldown": "PT1M"
							}
						},
						{
							"metricTrigger": {
								"metricName": "Percentage CPU",
								"metricNamespace": "",
								"metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('vmss_Name'))]",
								"timeGrain": "PT1M",
								"statistic": "Average",
								"timeWindow": "PT5M",
								"timeAggregation": "Average",
								"operator": "LessThan",
								"threshold": 25,
								"dimensions": [],
								"dividePerInstance": false
							},
							"scaleAction": {
								"direction": "Decrease",
								"type": "ChangeCount",
								"value": "1",
								"cooldown": "PT1M"
							}
						}
					]
				}],
				"enabled": true,
				"name": "[concat(parameters('Base_Name'), '-autoscale')]",
				"targetResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('vmss_Name'))]"
			}
		},
		{
			"type": "Microsoft.Insights/dataCollectionRules",
			"apiVersion": "2021-09-01-preview",
			"name": "default",
			"location": "[resourceGroup().location]",
			"dependsOn": [],
			"tags": {},
			"kind": "Linux",
			"properties": {
				"dataFlows": [{
					"destinations": [
						"[parameters('workspaceName')]"
					],
					"outputStream": "Microsoft-Syslog",
					"streams": [
						"Microsoft-Syslog"
					]
				}],
				"dataSources": {
					"syslog": [{
						"streams": [
							"Microsoft-Syslog"
						],
						"facilityNames": "[parameters('facilityNames')]",
						"logLevels": "[parameters('logLevels')]",
						"name": "[concat(parameters('dataCollectionRuleName'),'_stream')]"
					}]
				},
				"description": "string",
				"destinations": {
					"logAnalytics": [{
						"name": "[parameters('workspaceName')]",
						"workspaceResourceId": "[concat('/subscriptions/', parameters('workspaceSubscriptionId'), '/resourceGroups/', parameters('workspaceResourceGroupName'), '/providers/microsoft.operationalinsights/workspaces/', parameters('WorkspaceName'))]",
						"workspaceId": "[parameters('workspaceId')]"
					}]
				},
				"streamDeclarations": {}
			}
		},
		{
			"type": "Microsoft.ManagedIdentity/userAssignedIdentities",
			"apiVersion": "2018-11-30",
			"name": "managedIdentity",
			"location": "[resourceGroup().location]"

		},
		{
			"type": "Microsoft.Insights/dataCollectionRuleAssociations",
			"apiVersion": "2021-09-01-preview",
			"dependsOn": [
				"[resourceId('Microsoft.Insights/dataCollectionRules', 'default')]",
				"[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('vmss_Name'))]"
			],
			"name": "DCRa",
			"scope": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('vmss_Name'))]",
			"properties": {
				"dataCollectionRuleId": "[resourceId('Microsoft.Insights/dataCollectionRules', 'default')]",
				"description": "string"
			}
		}
  ]
}
